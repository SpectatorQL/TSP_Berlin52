diff --git a/src/Program.cs b/src/Program.cs
index b6e5d2f..22de42b 100644
--- a/src/Program.cs
+++ b/src/Program.cs
@@ -14,7 +14,8 @@ namespace Berlin
         static Flags _flags;
         static string _file;
         static int _m;
-        const double MUTATION_CHANCE = 0.04;
+        static double _mutationChance;
+        static int _nodesToMutate;
 
         static bool _running = true;
 
@@ -234,22 +235,22 @@ namespace Berlin
             return result;
         }
 
-        static void Mutate(int[] child, int dataLen)
+        static void Mutate(int[] child, int dataLen, int nodesToMutate)
         {
-            const int LEN = 3;
-            int[] nodesToMutate = new int[LEN]
+            int[] mutationIndices = new int[nodesToMutate];
+            for(int i = 0;
+                i < nodesToMutate;
+                ++i)
             {
-                _rand.Next(dataLen),
-                _rand.Next(dataLen),
-                _rand.Next(dataLen)
-            };
-            
+                mutationIndices[i] = _rand.Next(dataLen);
+            }
+
             for(int i = 0;
-                i < LEN;
+                i < nodesToMutate;
                 ++i)
             {
                 int j = _rand.Next(dataLen);
-                int k = nodesToMutate[i];
+                int k = mutationIndices[i];
 
                 int node = child[j];
                 child[j] = child[k];
@@ -300,8 +301,9 @@ namespace Berlin
                 _outputSB.Append(node);
                 _outputSB.Append('-');
             }
-
-            string output = string.Format("Iterations:{0} Mutations:{1} Best value:{2}\nBest path:{3}\n",
+            
+            string output = string.Format("Iterations:{0} Mutations:{1} Best value:{2}\n"
+                + "Best path:{3}\n",
                 _i,
                 _mutations,
                 bestVal,
@@ -464,8 +466,16 @@ namespace Berlin
                         data[j, i] = val;
                     }
                 }
+
             }
 
+            int range = 1000;
+            double chance = _m / (double)range;
+            double maxChance = 0.15;
+            _mutationChance = (chance < maxChance) ? chance : maxChance;
+
+            _nodesToMutate = (dataLen / 10) + (dataLen % 10);
+
             population = new int[_m, dataLen];
             fitnessValues = new int[_m];
             for(int i = 0;
@@ -556,20 +566,19 @@ namespace Berlin
                         throw new NullReferenceException();
                     }
                     
-
-                    int range = 1000;
+                    
                     double d = _rand.Next(range) / (double)range;
-                    if(MUTATION_CHANCE >= d)
+                    if(_mutationChance >= d)
                     {
                         ++_mutations;
-                        Mutate(child1, dataLen);
+                        Mutate(child1, dataLen, _nodesToMutate);
                     }
 
                     d = _rand.Next(range) / (double)range;
-                    if(MUTATION_CHANCE >= d)
+                    if(_mutationChance >= d)
                     {
                         ++_mutations;
-                        Mutate(child2, dataLen);
+                        Mutate(child2, dataLen, _nodesToMutate);
                     }
 
                     
